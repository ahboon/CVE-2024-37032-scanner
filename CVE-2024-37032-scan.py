import ipaddress
import requests
from concurrent.futures import ThreadPoolExecutor
from packaging import version

subnet = '' # Change subnet here
port = 11434
RED = '\033[91m'
GREEN = '\033[92m'
RESET = '\033[0m'


def is_vulnerable(ver_str):
    target_version = version.parse("0.1.34")
    current_version = version.parse(ver_str)
    return current_version < target_version

def check_service(ip):
    base_url = f"http://{ip}:{port}"
    try:
        response = requests.get(base_url, timeout=1)
        if response.status_code == 200:
            version_response = requests.get(f"{base_url}/api/version", timeout=1)
            if version_response.status_code == 200:
                version_data = version_response.json()
                if 'version' in version_data:
                    if is_vulnerable(version_data['version']):
                        print(f"{RED}VULNERABLE: {ip} - Version {version_data['version']}{RESET}")
                    else:
                        print(f"{GREEN}Not Vulnerable: {ip} - Version {version_data['version']}{RESET}")
    except requests.ConnectionError:
        pass
    except requests.Timeout:
        pass
    except Exception as e:
        print(f"Error checking {ip}: {e}")


with ThreadPoolExecutor(max_workers=50) as executor:
    futures = [executor.submit(check_service, str(ip)) for ip in ipaddress.IPv4Network(subnet)]
